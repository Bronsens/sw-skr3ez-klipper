# This file contains common pin mappings for the BigTreeTech SKR 3.
# This board can ship with one of two chips, STM32H743 or STM32H723.
# To use this config, during "make menuconfig" enable "low-level
# options", "STM32H743" or "STM32H723", "128KiB bootloader",
# and "25MHz clock".

# See docs/Config_Reference.md for a description of parameters.
[save_variables]
filename: ~/klipper-variables.cfg

[include ebb-canbus-v1.2.cfg]

[include nozzle_clean.cfg]

[include stealthburner_led_effects_barf.cfg]

[include adxlmcu.cfg]

[include client.cfg]

[include timelapse.cfg]
# [include shell_command.cfg]

[exclude_object]

[gcode_arcs]
resolution: 0.05

[virtual_sdcard]
path: /home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

# This file contains all settings for KAMP, and must be included in printer.cfg with:
[include KAMP_Settings.cfg]

[include GET_PROBE_LIMITS.cfg]

# [include fluidd.cfg]

[shaketune]
result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
# keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
# timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.

[display_status]

[pause_resume]

[firmware_retraction]
retract_length: 0.8
retract_speed: 35
unretract_extra_length: 0
unretract_speed: 35

[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

[force_move]
enable_force_move: True

[gcode_macro _KNOMI_STATUS]
variable_homing: False
variable_probing: False
variable_qgling: False
variable_heating_nozzle: False
variable_heating_bed: False
gcode:

[gcode_macro M109]
rename_existing: M109.1
gcode:
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=True
 STATUS_HEATING
 M109.1 {rawparams}
 STATUS_READY
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=False

[gcode_macro M190]
rename_existing: M190.1
gcode:
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=True
 STATUS_HEATING
 M190.1 {rawparams}
 STATUS_READY
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=False

[gcode_macro G28]
rename_existing: G28.1
gcode:
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True
 STATUS_HOMING
 G28.1 {rawparams}
 STATUS_READY
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True
 EXCLUDE_OBJECT_DEFINE
 STATUS_MESHING
 BTT_BED_MESH_CALIBRATE {rawparams}
 STATUS_READY
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False

[gcode_macro QUAD_GANTRY_LEVEL]
gcode:
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
 STATUS_CALIBRATING_Z
 Z_TILT_ADJUST
 STATUS_READY
 SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE_1
gcode:
 STATUS_HEATING
 SET_HEATER_TEMPERATURE_1 {rawparams}
 STATUS_READY


[gcode_macro G0]
rename_existing: G0.1
gcode:
  G1 {rawparams}

[gcode_macro G1]
rename_existing: G1.1
variable_z_hop_offset = 0
gcode:
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}
    ; Rewrite paramters for adjust Z if offset is activ and we are absulute
    {% set new_params = ''|string %}
    {% if ('E' in params) %}
      {% set new_params = new_params ~ " E" ~ params.E %}
    {% endif %}

    {% if ('F' in params) %}
      {% set new_params = new_params ~ " F" ~ params.F %}
    {% endif %}

    {% if ('X' in params) %}      {% set new_params = new_params ~ " X" ~ params.X %}
    {% endif %}

    {% if ('Y' in params) %}
      {% set new_params = new_params ~ " Y" ~ params.Y %}
    {% endif %}


    {% set new_params = new_params ~ (' Z%g' % (params.Z|float + OFFSET))|string %}

    ; Make the movement
    G1.1{new_params}
  {% else %}
    ; Don't care if relativ or no offset activ
    G1.1 {rawparams}
  {% endif %}


[gcode_macro G2]
rename_existing: G2.1
gcode:
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}
    ; Rewrite paramters for adjust Z if offset is activ and we are absulute

    {% set new_params = [] %}
    {% for key in params %}
      {% if key == "Z" %}
        {% set x = new_params.append('Z%g' % (params[key]|float + OFFSET)) %}
      {% else %}
        {% set x = new_params.append(key + params[key]) %}
      {% endif %}
    {% endfor %}

    {% set new_params=new_params|join(" ") %}

    ; Make the movement
    G2.1 {new_params}
  {% else %}
    ; Don't care if relativ or no offset activ
    G2.1 {rawparams}
  {% endif %}

[gcode_macro G3]
rename_existing: G3.1
gcode:
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}
    ; Rewrite paramters for adjust Z if offset is activ and we are absulute

    {% set new_params = [] %}
    {% for key in params %}
      {% if key == "Z" %}
        {% set x = new_params.append('Z%g' % (params[key]|float + OFFSET)) %}
      {% else %}
        {% set x = new_params.append(key + params[key]) %}
      {% endif %}
    {% endfor %}

    {% set new_params=new_params|join(" ") %}

    ; Make the movement
    G3.1 {new_params}
  {% else %}
    ; Don't care if relativ or no offset activ
    G3.1 {rawparams}
  {% endif %}

[gcode_macro HOME_X]
gcode:
    {% set HOME_CUR = 0.01500 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    # G4 P2000
    # Home
    G28 X0
    # Move away
    G1 X-15 F1500
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}

[gcode_macro HOME_Y]
gcode:
    {% set HOME_CUR = 0.01500 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    # G4 P2000
    # Move away
    G28 Y0
    # Move away
    G1 Y-52 F1500
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}
    SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={RUN_CUR}

# Set the wished ZHOP height/distance. Set to 0 will disable it!
[gcode_macro SET_ZHOP]
gcode:
  {% set HEIGHT = params.HEIGHT|default(0)|float %}
  {% set VELOCITY = params.VELOCITY|default(300)|float %}
  {% if VELOCITY > 0 %}
    SAVE_VARIABLE VARIABLE='current_zhop_velocity' VALUE={VELOCITY}
  {% endif %}
  {% if HEIGHT >= 0 %}
    SAVE_VARIABLE VARIABLE='current_zhop_height' VALUE={HEIGHT}
    SHOW_MSG MSG="ZHOP: Z{HEIGHT}/F{VELOCITY}"
  {% endif %}

# This should allways be part of the start gcode. Worestcase you will print with an positive offset.
[gcode_macro CLEAR_ZHOP]
gcode:
  SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE=0

# Print ZHOP settings
[gcode_macro GET_ZHOP]
gcode:
  {% set HEIGHT = printer.save_variables.variables.current_zhop_height|default(0)|float %}
  {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}
  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}
  SHOW_MSG MSG="ZHOP height:    {HEIGHT}"
  SHOW_MSG MSG="ZHOP velocity:  {VELOCITY}"
  SHOW_MSG MSG="ZHOP retracted: {'yes' if (OFFSET > 0) else 'no'}"

[gcode_macro SHOW_MSG]
gcode:
  {% set MSG = params.MSG|default("No msg")|string %}
  M117 {MSG}
  RESPOND MSG={'"%s"' % MSG}


[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

[gcode_macro START_PRINT]
gcode:
    M117
    {% set BED_TEMP = params.BED_TEMP|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
    # metric Values
    G21
    G92 E0
    # start with the fan off
    M107
    # Home the printer
    G28
    G90
    # Wait for bed to reach temperature
    M140 S{BED_TEMP}                  ; set bed temp
    M104 S150                         ; set temporary nozzle temp to prevent oozing during homing
    M190 S{BED_TEMP}
    DEEP_CLEAN_NOZZLE                  ; wait for bed temp
    G28 Z0
    # Adjust the Gantrty
    BED_MESH_CLEAR
    # QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE ADAPTIVE=1
    SMART_PARK
    M104 S{ params.EXTRUDER_TEMP }    ; set extruder temp
    M109 S{ params.EXTRUDER_TEMP }    ; wait for extruder temp
    STATUS_PRINTING
    CLEAN_NOZZLE
  	VORON_PURGE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                                   ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G10
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
      # Parameters
    {% set e = params.E|default(0.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                           ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
  {% if "xyz" in printer.toolhead.homed_axes %}
    G10
    G91
    # Raise nozzle by 10mm
    G1 Z10 F300
    G90
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
    G28 X Y
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    G1 X{x_park} Y{y_park} F2000
    # Disable steppers
    M84
    # M191 S35
    M141 S0
    STATUS_PART_READY

[gcode_macro T0]
gcode:
  ACTIVATE_EXTRUDER extruder=extruder
  SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder"'

[gcode_macro G29]				#界面中增加G29指令
gcode:
  G28
  bed_mesh_calibrate ADAPTIVE=1
  G1 X0 Y0 Z10 F4200

# [homing_override]
# set_position_z: 5
# axes: xyz
# gcode:
#     # {% set config   = printer['configfile'].config %}
#     # {% set HOME_CUR = 0.015 %}
#     # {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
#     # {% set RUN_CUR = driver_config.run_current %}

#     # #bed mesh must be cleared prior to homing
#     # # if bed mesh reloading is requested, the current profile name
#     # # must be stored to be reloaded later
#     SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True
#     STATUS_HOMING
#     G1 Z+15 F1000
#     # {% if 'bed_mesh' in config %}
#     #     {% if printer.bed_mesh.profile_name %}
#     #         {% set lastMeshProfile = printer.bed_mesh.profile_name %}
#     #     {% endif %}
#     #    BED_MESH_CLEAR
#     # {% endif %}

#     #reset parameters
#     {% set requested = {'x': False,
#                         'y': False,
#                         'z': False} %}

#     #sniff gcode parameters for
#     #which axes have been requested for homing
#     {% if   not 'X' in params
#         and not 'Y' in params
#         and not 'Z' in params %}

#         {% set X, Y, Z = True, True, True %}

#     {% else %}
#         {% if 'X' in params %}
#             {% set X = True %}
#             {% set null = requested.update({'x': True}) %}
#         {% endif %}
#         {% if 'Y' in params %}
#             {% set Y = True %}
#             {% set null = requested.update({'y': True}) %}
#         {% endif %}
#         {% if 'Z' in params %}
#             {% set Z = True %}
#             {% set null = requested.update({'z': True}) %}
#         {% endif %}
#     {% endif %}

#     {% if X %}
#         # SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
#         # G28 X0
#         # SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
#         # G1 X-15
#         HOME_X
#     {% endif %}

#     {% if Y %}
#         # SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
#         # G28 Y0
#         # SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}
#         # G1 Y-14
#         HOME_Y
#     {% endif %}

#     {% if Z %}
# 		#You can do your logic for safe z here
#     # G90
#     # SET_KINEMATIC_POSITION Z=0
#     # G4 P2000
#     G1 X117.5 Y117.5 F3600
# 		G28 Z0
#     G1 Z+15 F1000
#     {% endif %}

#     # {% if 'bed_mesh' in config and lastMeshProfile %}
#     #    BED_MESH_PROFILE LOAD={ lastMeshProfile }
#     #    { action_respond_info("Loaded Bed Mesh Profile (%s)" % (lastMeshProfile)) }
#     # {% endif %}
#     STATUS_READY
#     SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False

[filament_switch_sensor switch_sensor]
switch_pin: ^PA0
pause_on_runout: False
runout_gcode:
  PAUSE # [pause_resume] is required in printer.cfg
  M117 Filament switch runout
insert_gcode:
  M117 Filament switch inserted

[filament_motion_sensor encoder_sensor]
switch_pin: ^PC2
detection_length: 2.88
extruder: extruder
pause_on_runout: False
runout_gcode:
  PAUSE # [pause_resume] is required in printer.cfg
  M117 Filament encoder runout
insert_gcode:
  M117 Filament encoder inserted

[stepper_x]
step_pin: PD4
dir_pin: PD3
enable_pin: !PD6
microsteps: 32
rotation_distance: 40
full_steps_per_rotation: 200
# endstop_pin: ^PC0
endstop_pin = tmc2209_stepper_x:virtual_endstop #^PC1 #^!
position_endstop: 0
position_min: 0
position_max: 220
homing_speed: 40
homing_retract_dist: 0

[stepper_y]
step_pin: PA15
dir_pin: !PA8
enable_pin: !PD1
microsteps: 32
rotation_distance: 40
full_steps_per_rotation: 200
endstop_pin: ^PC15
# endstop_pin = tmc2209_stepper_y:virtual_endstop #^PC3 #^!
position_endstop: -64
position_min: -64
position_max: 220
homing_speed: 40                                                    # for sensorless homing it is recommended not to go above 40mm/s
homing_retract_dist: 0

[stepper_y1]
step_pin: PD15
dir_pin: PD14
enable_pin: !PC7
microsteps: 32
# endstop_pin: PG14
full_steps_per_rotation: 200
rotation_distance: 40


[stepper_z]
# step_pin: PE2
# dir_pin: PE3
# enable_pin: !PE0
step_pin: PD11
dir_pin: PD10
enable_pin: !PD13
microsteps: 32
rotation_distance: 40
# gear_ratio: 80:16
full_steps_per_rotation: 200 #200 for 1.8 degree, 400 for 0.9 degree
endstop_pin: probe:z_virtual_endstop  #enable to use bltouch
# endstop_pin: ^PA7   #disable to use bltouch
# position_endstop: 0.0  #disable to use bltouch
position_max: 220
position_min: -8
homing_speed: 25
homing_retract_dist: 5.0
# Distance to backoff (in mm) before homing a second time during
# homing. Set this to zero to disable the second home. The default
# is 5mm.
homing_retract_speed: 10
# Speed to use on the retract move after homing in case this should
# be different from the homing speed, which is the default for this
# parameter
second_homing_speed: 5
# Velocity (in mm/s) of the stepper when performing the second home.
# The default is homing_speed/2.

# [stepper_z1]
# # step_pin: PE2
# # dir_pin: PE3
# # enable_pin: !PE0
# step_pin: PD11
# dir_pin: !PD10
# enable_pin: !PD13
# microsteps: 32
# rotation_distance: 40
# full_steps_per_rotation: 200 #200 for 1.8 degree, 400 for 0.9 degree
# gear_ratio: 80:16

# [z_tilt]
# z_positions: -19.5,117.5
#              250,117.5
# # A list of X, Y coordinates (one per line; subsequent lines
# # indented) describing the location of each bed "pivot point". The
# # "pivot point" is the point where the bed attaches to the given Z
# # stepper. It is described using nozzle coordinates (the X, Y position
# # of the nozzle if it could move directly above the point). The
# # first entry corresponds to stepper_z, the second to stepper_z1,
# # the third to stepper_z2, etc. This parameter must be provided.
# points: 0,117.5
#         220,117.5
# # A list of X, Y coordinates (one per line; subsequent lines
# # indented) that should be probed during a Z_TILT_ADJUST command.
# # Specify coordinates of the nozzle and be sure the probe is above
# # the bed at the given nozzle coordinates. This parameter must be
# # provided.
# speed: 100
# # The speed (in mm/s) of non-probing moves during the calibration.
# # The default is 50.
# horizontal_move_z: 10
# # The height (in mm) that the head should be commanded to move to
# # just prior to starting a probe operation. The default is 5.
# retries: 10
# # Number of times to retry if the probed points aren't within
# # tolerance.
# retry_tolerance: 0.01
# # If retries are enabled then retry if largest and smallest probed
# # points differ more than retry_tolerance. Note the smallest unit of
# # change here would be a single step. However if you are probing
# # more points than steppers then you will likely have a fixed
# # minimum value for the range of probed points which you can learn
# # by observing command output.

[extruder]
step_pin: can0:EXT_STEP
dir_pin: can0:EXT_DIR
enable_pin: !can0:EXT_EN
# rotation_distance: 5.693950177935943
rotation_distance: 5.7
microsteps: 16
full_steps_per_rotation: 200 #1.8deg Motor
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_only_distance: 120 # default is 50mm
max_extrude_cross_section: 5   # 0.640
max_extrude_only_velocity: 120
heater_pin: can0:HE0
# sensor_type: Generic 3950
# sensor_type: ATC Semitec 104NT-4-R025H42G
# sensor_pin: can0:TH0
sensor_type: MAX31865
sensor_pin: can0:PA4
spi_bus: spi1
rtd_nominal_r: 1000
rtd_reference_r: 4300
rtd_num_of_wires: 2
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
min_temp: 0
max_temp: 350
pressure_advance: 0.0425

######################
### Chamber Heater ###
######################

# [temperature_sensor Chamber_Temp]
# sensor_type: ATC Semitec 104NT-4-R025H42G # Set to your Thermistor Type.
# sensor_pin: PA2 # Pin for Chamber Temp thermistor not the thermistor in the heater.

[heater_generic chamber_heater]
gcode_id: C
heater_pin: PB4 # Pin for Heater control
sensor_type: ATC Semitec 104NT-4-R025H42G # Set to your Thermistor Type.
sensor_pin: PA2 # Pin for Chamber Temp thermistor not the thermistor in the heater.
# sensor_type: temperature_combined
# sensor_list: temperature_sensor Chamber_Temp, temperature_sensor EBB_Temp
#   Must be provided. List of sensors to combine to new "virtual"
#   sensor.
#   E.g. 'temperature_sensor sensor1,extruder,heater_bed'
# combination_method: mean
#   Must be provided. Combination method used for the sensor.
#   Available options are 'max', 'min', 'mean'.
# maximum_deviation: 999.9
#   Must be provided. Maximum permissible deviation between the sensors
#   to combine (e.g. 5 degrees). To disable it, use a large value (e.g. 999.9)
# control: watermark
# max_power: 1.0
min_temp: 0
max_temp: 150
#control: pid
#pid_Kp=35 
#pid_Ki=1 
#pid_Kd=350

[verify_heater chamber_heater]
max_error: 900
check_gain_time: 900
hysteresis: 5
heating_gain: 1 # Adjust to between 0 and 1 as needed. 1 being 100% 0 Being Off.

##########################
### Chamber Heater Fan ###
##########################

[temperature_fan chamber_heater_fan]
pin: PB6 # Fan Control Pin.
max_power: 1.0
shutdown_speed: 1
kick_start_time: 0.5
sensor_type: ATC Semitec 104NT-4-R025H42G # Set to your Thermistor Type.
sensor_pin: PA3 # Pin for thermistor in the Heater.
control: watermark
max_delta: 2.0
min_temp: 0
max_temp: 150
target_temp: 35.0 # Fan will turn off below this level and turn back on above.

######################
### Chamber Macros ###
######################

[gcode_macro M141]
gcode:
  ;take the paramater S of M141 and store it as CHAMBER_TEMP. If S is not provided, set as 21c.
  {% set CHAMBER_TEMP = params.S|default(21)|float %}
  ;set heater chamber_heater equal to M141 S parameter by setting equal to CHAMBER_TEMP.
  SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={CHAMBER_TEMP}

[gcode_macro M191]
gcode:
  ;take the paramater S of M141 and store it as CHAMBER_TEMP. If S is not provided, set as 21c.
  {% set CHAMBER_TEMP = params.S|default(21)|float %}
  ;set heater chamber_heater equal to M141 S parameter by setting equal to CHAMBER_TEMP.
  SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={CHAMBER_TEMP}
  ;wait for chamber_heater to reach temprature.
  TEMPERATURE_WAIT SENSOR="heater_generic chamber_heater" MINIMUM={CHAMBER_TEMP}

#[extruder1]
#step_pin: PD11
#dir_pin: PD10
#enable_pin: !PD13
#heater_pin: PB4
#sensor_pin: PA3
#...

[probe]
##	This probe is not used for Z height, only Quad Gantry Leveling
##	In Z+ position
##	If your probe is NO instead of NC, change pin to ^!PA3
##  pin: ^PA3  ## Spider Pin
pin: !can0:PROBE_1
x_offset: 0
#y_offset: 25.0
y_offset: 0
#z_offset: 9.5   #when using induction, set to zero
#z_offset: 0
speed: 3.0     # when using induction, set to 10
lift_speed: 10 #remove when using induction
samples: 3
samples_result: median
sample_retract_dist: 3.0
# samples_tolerance: 0.006
samples_tolerance: 0.01
samples_tolerance_retries: 4
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}


[safe_z_home]
# home_xy_position: 160,120 # Change coordinates to the center of your print bed
home_xy_position: 117.5,117.5
speed: 150
z_hop: 10               # Move up 10mm
z_hop_speed: 10

[verify_heater extruder]
check_gain_time: 200
hysteresis: 5

[bed_mesh]
speed: 300
horizontal_move_z: 8
mesh_min: 5,5           #need to handle head distance with bl_touch
mesh_max: 230,206       #max probe range
probe_count: 10,10
adaptive_margin: 5
mesh_pps: 2, 2
fade_start: 1
fade_end: 5
split_delta_z: .010
move_check_distance: 3.0
algorithm: bicubic
bicubic_tension: 0.2

[bed_screws]
screw1:30,25
screw1_name:1
screw2:200,25
screw2_name:2
screw3:200,195
screw3_name:3
screw4:30,195
screw4_name:4

[screws_tilt_adjust]
screw1: 30, 25     #screw coordinates need to be measure for YOUR specific printer
screw1_name: front left screw
screw2: 200, 25
screw2_name: front right screw
screw3: 200, 195
screw3_name: rear right screw
screw4: 30, 195
screw4_name: rear left screw
horizontal_move_z: 10
speed: 50   #speed of travel moves between screws
screw_thread: CW-M4  #measure your bed screw m3=3mm / m4=4mm / m5=5mm


[heater_bed]
heater_pin: PD7
sensor_type: NTC 100K MGB18-104F39050L32
# sensor_type: Generic 3950
sensor_pin: PA1
#control: watermark
min_temp: 0
max_temp: 130

# [multi_pin part_cooling_fan]

# pins: can0:FAN1, can0:FAN0
# pins: PB6, PB7

[fan]
# pin = multi_1pin:part_cooling_fan
pin: can0:FAN0
max_power: 1.0
kick_start_time: 0.5                                                # Depending on your fan, you may need to increase this value if your fan will not start
off_below: 0.13
cycle_time: 0.010

#[fan]
#pin: PB7

#[heater_fan fan1]
#pin: PB6

[heater_fan heatbreak_cooling_fan]
pin: can0:PA1
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0

#[heater_fan fan2]
#pin: PB5

[mcu]
canbus_uuid: 45354e89214f
# serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_450012001251313238353730-if00
# restart_method: command

[temperature_sensor MCU]
sensor_type: temperature_mcu
min_temp: 10
max_temp: 100

[temperature_sensor Pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[printer]
kinematics: corexz
max_velocity: 1800
max_accel: 3500
max_z_velocity: 100
max_z_accel: 1000
square_corner_velocity: 4.0

[input_shaper]
enabled_extruders: extruder
#shaper_type_x = mzv
#shaper_freq_x = 89.8
#shaper_type_y = mzv
#shaper_freq_y = 35.2

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z4.5 F300
    G90
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
    G28 X Y
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    G1 Y{y_park} F2000
    M84
  CANCEL_PRINT_BASE

[gcode_macro BED_LEVEL]
gcode:
    G28
    BED_MESH_CALIBRATE


[gcode_macro Z_AXI_CALIBRATE]
gcode:
    status_calibrating_z
    G28
    PROBE_CALIBRATE
    status_ready

[gcode_macro SHAPER]
gcode:
    G28
    SHAPER_CALIBRATE

[gcode_macro PID]
gcode:
    G28
    {% set requested = {'extruder': False,
                        'heater_bed': False} %}

    #sniff gcode parameters for
    #which axes have been requested for homing
    {% if   not 'extruder' in params
        and not 'heater_bed' in params %}

        {% set extruder, heater_bed = True, True %}

    {% else %}
        {% if 'extruder' in params %}
            {% set Extruder = True %}
            {% set null = requested.update({'extruder': True}) %}
        {% endif %}
        {% if 'heater_bed' in params %}
            {% set Heater_bed = True %}
            {% set null = requested.update({'heater_bed': True}) %}
        {% endif %}
    {% endif %}

    {% if Extruder %}
        PID_CALIBRATE HEATER=extruder TARGET=200
    {% endif %}

    {% if Heater_bed %}
        PID_CALIBRATE HEATER=heater_bed TARGET=60
    {% endif %}
      
[gcode_macro Press_Advance_direct]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

[gcode_macro Press_Advance_bowden]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  86
variable_purge_distance:  7
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  86
variable_purge_distance:  10
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

#[gcode_macro LOAD_FILAMENT]
#gcode:
#   M83                            ; set extruder to relative
#   G1 E50 F300                    ; load
#   G1 E15 F150                    ; prime nozzle with filament
#   M82                            ; set extruder to absolute

#[gcode_macro UNLOAD_FILAMENT]
#gcode:
#   M83                            ; set extruder to relative
#   G1 E10 F300                    ; extrude a little to soften tip
#   G1 E-50 F1800                  ; retract some, but not too much or it will jam
#   M82                            ; set extruder to absolute

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

########################################
# TMC2209 configuration
########################################
[motor_constants 36H020H-1004A-001]
## Pancake Motor found on Bondtech Extruders: LGX Lite v1/2, Orbiter, Hextrudort, Sherpa Mini
resistance: 2.37
inductance: 0.0012
holding_torque: 0.08825985
max_current: 1.0
steps_per_revolution: 200

[autotune_tmc stepper_x]
motor: omc-17he15-1504s
sg4_thrs: 120

[autotune_tmc stepper_y]
motor: omc-17he15-1504s
# sg4_thrs: 80

[autotune_tmc stepper_y1]
motor: omc-17he15-1504s
# sg4_thrs: 80

[autotune_tmc stepper_z]
motor: omc-17he15-1504s
tuning_goal: performance

# [autotune_tmc stepper_z1]
# motor: omc-17he15-1504s
# tuning_goal: performance

[autotune_tmc extruder]
motor: 36H020H-1004A-001


[tmc2209 stepper_x]
uart_pin: PD5
run_current: 0.800
diag_pin: ^PC1
# driver_SGTHRS: 80
uart_pin: PD5
interpolate: True
run_current: 0.707
sense_resistor: 0.110
# stealthchop_threshold: 100                                        # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle
# diag_pin: ^PC1                                                      # YOU NEED TO JUMP THIS DIAG PIN ON YOUR BOARD FOR SENSORLESS
# driver_SGTHRS: 100


[tmc2209 stepper_y]
# uart_pin: PD0
# run_current: 0.800
# diag_pin: ^PC3
uart_pin: PD0
interpolate: True
run_current: 0.707
#run_current: 0.65
sense_resistor: 0.110
# stealthchop_threshold: 100                                          # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle
# diag_pin: ^PC3                                                        # YOU NEED TO JUMP THIS DIAG PIN ON YOUR BOARD FOR SENSORLESS
# driver_SGTHRS: 113                                                  # this is set to 255 which is the MAX sensitivity for sensorless homing, you will need to tune this later

[tmc2209 stepper_y1]
uart_pin: PC6
interpolate: True
run_current: 0.707
sense_resistor: 0.110
# stealthchop_threshold: 100                                          # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle
# diag_pin: ^PC2                                                        # YOU NEED TO JUMP THIS DIAG PIN ON YOUR BOARD FOR SENSORLESS
# driver_SGTHRS: 113                                                  # this is set to 255 which is the MAX sensitivity for sensorless homing, you will need to tune this later

# [tmc2209 stepper_z1]
# uart_pin: PE1
# run_current: 0.707
# diag_pin:

[tmc2209 stepper_z]
uart_pin: PD12
interpolate: True
run_current: 0.707
diag_pin:

[tmc2209 extruder]
uart_pin: can0:EXT_UART
interpolate: False
run_current: 0.707
# run_current: 0.707
diag_pin:
sense_resistor: 0.110
# stealthchop_threshold: 999999

[idle_timeout]
timeout: 172800

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid_v
#*# pid_kp = 19.551
#*# pid_ki = 1.422
#*# pid_kd = 67.210
#*# pid_version = 1
#*# pid_target = 220.00
#*# pid_tolerance = 0.0100
#*#
#*# [heater_bed]
#*# pid_kp = 34.633
#*# pid_ki = 0.507
#*# pid_kd = 591.653
#*# control = pid_v
#*# pid_version = 1
#*# pid_target = 60.00
#*# pid_tolerance = 0.0100
#*#
#*# [input_shaper]
#*# shaper_type_x = smooth_zv
#*# shaper_freq_x = 50.6
#*# damping_ratio_x = 0.038
#*# shaper_type_y = smooth_mzv
#*# shaper_freq_y = 34.4
#*# damping_ratio_y = 0.136
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.212058, 0.169558, 0.135808, 0.079558, 0.022058, -0.030442, -0.091692, -0.152942, -0.224192, -0.276692
#*# 	0.168308, 0.137058, 0.110808, 0.080808, 0.037058, -0.010442, -0.051692, -0.097942, -0.152942, -0.174192
#*# 	0.129558, 0.105808, 0.100808, 0.088308, 0.078308, 0.037058, -0.001692, -0.037942, -0.071692, -0.067942
#*# 	0.099558, 0.098308, 0.092058, 0.090808, 0.089558, 0.090808, 0.057058, 0.020808, -0.012942, 0.010808
#*# 	0.067058, 0.082058, 0.085808, 0.107058, 0.107058, 0.105808, 0.109558, 0.085808, 0.052058, 0.064558
#*# 	0.023308, 0.053308, 0.070808, 0.090808, 0.093308, 0.113308, 0.139558, 0.124558, 0.094558, 0.150808
#*# 	-0.035442, -0.000442, 0.027058, 0.070808, 0.092058, 0.109558, 0.134558, 0.143308, 0.153308, 0.207058
#*# 	-0.099192, -0.040442, -0.020442, 0.024558, 0.067058, 0.102058, 0.140808, 0.162058, 0.188308, 0.249558
#*# 	-0.174192, -0.114192, -0.071692, -0.007942, 0.034558, 0.092058, 0.139558, 0.175808, 0.213308, 0.272058
#*# 	-0.264192, -0.199192, -0.125442, -0.055442, 0.005808, 0.062058, 0.118308, 0.172058, 0.235808, 0.310808
#*# x_count = 10
#*# y_count = 10
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 5.0
#*# max_x = 230.0
#*# min_y = 5.0
#*# max_y = 205.97
#*#
#*# [probe]
#*# z_offset = -0.945
#*#
#*# [heater_generic chamber_heater]
#*# control = pid
#*# pid_kp = 52.096
#*# pid_ki = 0.998
#*# pid_kd = 679.851
